// BRUTE FORCE
// ***** intersection of two arrays *****//
class Solution {
  public:
    // Function to return the count of the number of elements in
    // the intersection of two arrays.
    int NumberofElementsInIntersection(int a[], int b[], int n, int m) {
        // Sort the arrays for efficient comparison
        sort(a, a + n);
        sort(b, b + m);
        
        vector<int> ans;
        int count = 0;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (a[i] == b[j]) {
                    ans.push_back(a[i]);
                    count++;
                    break; // Move to the next element in 'a' since duplicates aren't allowed
                }
            }
        }
        
        return count;
    }
};

// BETTER APPROACH
// ***** intersection of two arrays *****// 
//  USING UNORDERED SET  //
class Solution {
  public:
    // Function to return the count of the number of elements in
    // the intersection of two arrays.
    int NumberofElementsInIntersection(int a[], int b[], int n, int m) {
        // Your code goes here
        unordered_set<int> st;
        int count=0;
        for(int i=0;i<n;i++){
            st.insert(a[i]);
        }
        for(int i=0;i<m;i++){
            if(st.find(b[i])!=st.end()){
                count++;
                st.erase(b[i]);
            }
        }
        return count;
    }
    
};
